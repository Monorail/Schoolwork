import java.applet.Applet;
import java.awt.*;
import java.awt.event.*;

public class EightQueens extends Applet implements MouseListener,
		MouseMotionListener {

	private static final long serialVersionUID = 1L;

	static final int NUMROWS = 8;
	static final int NUMCOLS = 8;
	static final int SQUAREWIDTH = 50;
	static final int SQUAREHEIGHT = 50;
	static final int BOARDLEFT = 50;
	static final int BOARDTOP = 50;

	int m_nBoard[][] = new int[8][8];

	void ClearBoard() {
		for (int nRow = 0; nRow < NUMROWS; nRow++) {
			for (int nCol = 0; nCol < NUMCOLS; nCol++) {
				m_nBoard[nRow][nCol] = 0;
			}
		}
	}

	int m_nMoves[] = new int[8];
	int m_nMoveIndex = 0;

	boolean m_bClash = false;

	Image m_imgQueen;
	MediaTracker tracker = new MediaTracker(this);

	public void init() {
		setSize(1020, 700);
		addMouseListener(this);
		addMouseMotionListener(this);

		try {
			m_imgQueen = getImage(getDocumentBase(), "queen.png");
			tracker.addImage(m_imgQueen, 1);
			tracker.waitForAll();
		} catch (Exception e) {
		}
		solve(8);
	}

	public static void solve(int n) {
		int[] rows = new int[n];
		boolean[] used_rows = new boolean[n];
		boolean[] diagonals = new boolean[2 * n];
		boolean[] contra = new boolean[2 * n];

		// Boom.
		int[] cnt = solve(rows, used_rows, diagonals, contra, 0);
		System.out.println("Found " + cnt + " solutions.\n");
	}

	private static int[] solve(int[] rows, boolean[] r, boolean[] d,
			boolean[] c, int col) {
		if (col == rows.length) {
			printSolution(rows);
			return rows;
		}

		int cnt = 0;

		for (int i = 0; i < rows.length; i++) {
			try {
				Thread.sleep(5);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			int md = (col - i) + (rows.length - 1);
			int cd = 2 * (rows.length - 1) - (i + col);

			if (!r[i] && !d[md] && !c[cd]) {
				r[i] = d[md] = c[cd] = true;

				rows[col] = i;

				if (solve(rows, r, d, c, col + 1) != null)
					return rows;

				r[i] = d[md] = c[cd] = false;
			}
		}
		return null;
	}

	private static void printSolution(int[] rows) {
		System.out.println("Solution:\n");

		for (int i = 0; i < rows.length; i++) {
			for (int j = 0; j < rows.length; j++)
				System.out.print((rows[i] == j) ? 'Q' : '.');

			System.out.println();
		}

		System.out.println();
	}

	void DrawSquares(Graphics canvas) {
		canvas.setColor(Color.BLACK);
		for (int nRow = 0; nRow < NUMROWS; nRow++) {
			for (int nCol = 0; nCol < NUMCOLS; nCol++) {
				canvas.drawRect(BOARDLEFT + nCol * SQUAREWIDTH, BOARDTOP + nRow
						* SQUAREHEIGHT, SQUAREWIDTH, SQUAREHEIGHT);

				if (m_nBoard[nRow][nCol] != 0) {
					canvas.drawImage(m_imgQueen, BOARDLEFT + nCol * SQUAREWIDTH
							+ 8, BOARDTOP + nRow * SQUAREHEIGHT + 6, null);
				}
			}
		}
	}

	void CheckColumns(Graphics canvas) {
		// Check all columns
		for (int nCol = 0; nCol < NUMCOLS; nCol++) {
			int nColCount = 0;
			for (int nRow = 0; nRow < NUMROWS; nRow++) {
				if (m_nBoard[nRow][nCol] != 0) {
					nColCount++;
				}
			}
			if (nColCount > 1) {
				canvas.drawLine(BOARDLEFT + nCol * SQUAREWIDTH
						+ (SQUAREWIDTH / 2), BOARDTOP + (SQUAREHEIGHT / 2),
						BOARDLEFT + nCol * SQUAREWIDTH + (SQUAREWIDTH / 2),
						BOARDTOP + SQUAREHEIGHT * 7 + (SQUAREHEIGHT / 2));

				m_bClash = true;
			}
		}
	}

	void CheckRows(Graphics canvas) {
		for (int nRow = 0; nRow < NUMROWS; nRow++) {
			int nRowCount = 0;
			for (int nCol = 0; nCol < NUMCOLS; nCol++) {
				if (m_nBoard[nRow][nCol] != 0) {
					nRowCount++;
				}
			}
			if (nRowCount > 1) {
				canvas.drawLine(BOARDLEFT + (SQUAREWIDTH / 2), BOARDTOP + nRow
						* SQUAREHEIGHT + (SQUAREHEIGHT / 2), BOARDLEFT + 7
						* SQUAREWIDTH + (SQUAREWIDTH / 2), BOARDTOP + nRow
						* SQUAREHEIGHT + (SQUAREHEIGHT / 2));

				m_bClash = true;
			}
		}
	}

	void CheckDiagonal1(Graphics canvas) {
		// Check diagonal 1

		for (int nRow = NUMROWS - 1; nRow >= 0; nRow--) {
			int nCol = 0;

			int nThisRow = nRow;
			int nThisCol = nCol;

			int nColCount = 0;

			while (nThisCol < NUMCOLS && nThisRow < NUMROWS) {
				if (m_nBoard[nThisRow][nThisCol] != 0) {
					nColCount++;
				}
				nThisCol++;
				nThisRow++;
			}

			if (nColCount > 1) {
				canvas.drawLine(BOARDLEFT + nCol * SQUAREWIDTH
						+ (SQUAREWIDTH / 2), BOARDTOP + nRow * SQUAREHEIGHT
						+ (SQUAREHEIGHT / 2), BOARDLEFT + (nThisCol - 1)
						* SQUAREWIDTH + (SQUAREWIDTH / 2), BOARDTOP
						+ (nThisRow - 1) * SQUAREHEIGHT + (SQUAREHEIGHT / 2));

				m_bClash = true;
			}
		}

		for (int nCol = 1; nCol < NUMCOLS; nCol++) {
			int nRow = 0;

			int nThisRow = nRow;
			int nThisCol = nCol;

			int nColCount = 0;

			while (nThisCol < NUMCOLS && nThisRow < NUMROWS) {
				if (m_nBoard[nThisRow][nThisCol] != 0) {
					nColCount++;
				}
				nThisCol++;
				nThisRow++;
			}

			if (nColCount > 1) {
				canvas.drawLine(BOARDLEFT + nCol * SQUAREWIDTH
						+ (SQUAREWIDTH / 2), BOARDTOP + nRow * SQUAREHEIGHT
						+ (SQUAREHEIGHT / 2), BOARDLEFT + (nThisCol - 1)
						* SQUAREWIDTH + (SQUAREWIDTH / 2), BOARDTOP
						+ (nThisRow - 1) * SQUAREHEIGHT + (SQUAREHEIGHT / 2));

				m_bClash = true;
			}

		}

	}

	void CheckDiagonal2(Graphics canvas) {
		// Check diagonal 2

		for (int nRow = NUMROWS - 1; nRow >= 0; nRow--) {
			int nCol = NUMCOLS - 1;

			int nThisRow = nRow;
			int nThisCol = nCol;

			int nColCount = 0;

			while (nThisCol >= 0 && nThisRow < NUMROWS) {
				if (m_nBoard[nThisRow][nThisCol] != 0) {
					nColCount++;
				}
				nThisCol--;
				nThisRow++;
			}

			if (nColCount > 1) {
				canvas.drawLine(BOARDLEFT + nCol * SQUAREWIDTH
						+ (SQUAREWIDTH / 2), BOARDTOP + nRow * SQUAREHEIGHT
						+ (SQUAREHEIGHT / 2), BOARDLEFT + (nThisCol + 1)
						* SQUAREWIDTH + (SQUAREWIDTH / 2), BOARDTOP
						+ (nThisRow - 1) * SQUAREHEIGHT + (SQUAREHEIGHT / 2));

				m_bClash = true;
			}
		}

		for (int nCol = NUMCOLS - 1; nCol >= 0; nCol--) {
			int nRow = 0;

			int nThisRow = nRow;
			int nThisCol = nCol;

			int nColCount = 0;

			while (nThisCol >= 0 && nThisRow < NUMROWS) {
				if (m_nBoard[nThisRow][nThisCol] != 0) {
					nColCount++;
				}
				nThisCol--;
				nThisRow++;
			}

			if (nColCount > 1) {
				canvas.drawLine(BOARDLEFT + nCol * SQUAREWIDTH
						+ (SQUAREWIDTH / 2), BOARDTOP + nRow * SQUAREHEIGHT
						+ (SQUAREHEIGHT / 2), BOARDLEFT + (nThisCol + 1)
						* SQUAREWIDTH + (SQUAREWIDTH / 2), BOARDTOP
						+ (nThisRow - 1) * SQUAREHEIGHT + (SQUAREHEIGHT / 2));

				m_bClash = true;
			}

		}
	}

	public void paint(Graphics canvas) {

		m_bClash = false;

		DrawSquares(canvas);

		canvas.setColor(Color.RED);

		CheckColumns(canvas);
		CheckRows(canvas);
		CheckDiagonal1(canvas);
		CheckDiagonal2(canvas);
	}

	@Override
	public void mouseClicked(MouseEvent e) {
	}

	@Override
	public void mouseDragged(MouseEvent arg0) {
	}

	@Override
	public void mouseMoved(MouseEvent arg0) {
	}

	@Override
	public void mouseEntered(MouseEvent arg0) {
	}

	@Override
	public void mouseExited(MouseEvent arg0) {
	}

	@Override
	public void mousePressed(MouseEvent arg0) {
		int nCol = (arg0.getX() - BOARDLEFT) / SQUAREWIDTH;
		int nRow = (arg0.getY() - BOARDTOP) / SQUAREHEIGHT;
		if (nCol >= 0 && nRow >= 0 && nCol < NUMCOLS && nRow < NUMROWS) {
			m_nBoard[nRow][nCol] ^= 1;
			repaint();
		}
	}

	@Override
	public void mouseReleased(MouseEvent arg0) {
	}

}
