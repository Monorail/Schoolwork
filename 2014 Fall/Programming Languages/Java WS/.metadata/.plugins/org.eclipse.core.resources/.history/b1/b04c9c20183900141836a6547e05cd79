import java.applet.Applet;
import java.awt.*;
import java.awt.event.*;

public class EightQueens  extends Applet implements MouseListener, MouseMotionListener
{

	private static final long serialVersionUID = 1L;

	static final int NUMROWS = 8;
	static final int NUMCOLS = 8;
	static final int SQUAREWIDTH = 50;
	static final int SQUAREHEIGHT = 50;
	static final int BOARDLEFT = 50;
	static final int BOARDTOP = 50;
	
	int m_nBoard[][] = new int[8][8];
	void ClearBoard()
	{
		for( int nRow=0; nRow<NUMROWS; nRow++ )
		{
			for( int nCol=0; nCol<NUMCOLS; nCol++ )
			{
				m_nBoard[nRow][nCol] = 0;
			}
		}
	}

	int m_nMoves[] = new int[8];
	int m_nMoveIndex = 0;

	boolean m_bClash = false;
	
	Image m_imgQueen;
	MediaTracker tracker = new MediaTracker(this);
	
	public void init() 
	{
        setSize(1020,700);  
        addMouseListener( this );
        addMouseMotionListener( this );        

        try 
        {
        	m_imgQueen = getImage(getDocumentBase(),"queen.png");
        	tracker.addImage(m_imgQueen, 1);
        	tracker.waitForAll();        	
        } 
        catch (Exception e) 
        {
        }
		solve(8);
	}

	public static void solve(int n)
	{
		// We'll place one queen per column. row[i] will indicate which row the
		// queen from column 'i' occupies.
		int [] rows = new int[n];

		// I'll use these boolean arrays to keep track of which rows, diagonals,
		// and contradiagonals are already dominated by a queen (as opposed to
		// an O(n) check every time I place a queen to determine whether it can
		// be attacked by other queens).

		// NOTE: The array lengths for 'diagonals' and 'contra' could be
		// (2 * n - 1), but by making them (2 * n), I ensure the program doesn't
		// crash when n is zero. In fact, it now returns the correct result for
		// n = 0.
		boolean [] used_rows = new boolean[n];
		boolean [] diagonals = new boolean[2 * n];
		boolean [] contra    = new boolean[2 * n];

		// Boom.
		int cnt = solve(rows, used_rows, diagonals, contra, 0);
		System.out.println("Found " + cnt + " solutions.\n");
	}

	// Notice that 'col' tells us what column we're trying to place a queen in
	// at the moment, as well as how many queens have already been placed on the
	// board. That is often the case with recursive algorithms: a parameter can
	// be interpreted in different ways, depending on your perspective.
	private static int solve(int [] rows, boolean [] r, boolean [] d, boolean [] c, int col)
	{
		// We found a solution, so print it out!
		if (col == rows.length)
		{
			printSolution(rows);
			return 1;
		}

		// Track the number of solutions we find.
		int cnt = 0;

		// Consider placing this queen in each row.
		for (int i = 0; i < rows.length; i++)
		{
			// These are the formulae for determining which diagonal / contra-
			// diagonal the queen would be occupying.
			int md = (col - i) + (rows.length - 1);
			int cd = 2 * (rows.length - 1) - (i + col);

			// If this row, diagonal, and contra-diagonal aren't already in use...
			if (!r[i] && !d[md] && !c[cd])
			{
				// Place the queen there. (Mark these rows and diagonals as
				// dominated.)
				r[i] = d[md] = c[cd] = true;

				// Keep track of which row queen 'i' occupies.
				rows[col] = i;

				// Move on to the next column.
				return solve(rows, r, d, c, col + 1);

				// As we return, pick up this queen and unmark these positions.
				//r[i] = d[md] = c[cd] = false;
			}
		}
		// Return the number of solutions we encountered in our recursive calls.
		return cnt;
	}

	// This prints out the nxn board with '.' in empty spaces and 'Q' wherever
	// there's a queen.
	private static void printSolution(int [] rows)
	{
		System.out.println("Solution:\n");

		for (int i = 0; i < rows.length; i++)
		{
			for (int j = 0; j < rows.length; j++)
				System.out.print((rows[i] == j) ? 'Q' : '.');

			System.out.println();
		}

		System.out.println();
	}

	public static void main(String [] args)
	{
		// If we have a command line argument, use that as 'n'. Otherwise,
		// default to n = 4.
	}
	void DrawSquares( Graphics canvas )
	{
		canvas.setColor(Color.BLACK);
		for( int nRow=0; nRow<NUMROWS; nRow++ )
		{
			for( int nCol=0; nCol<NUMCOLS; nCol++ )
			{
				canvas.drawRect( BOARDLEFT + nCol * SQUAREWIDTH,
					BOARDTOP + nRow * SQUAREHEIGHT, SQUAREWIDTH, SQUAREHEIGHT );
				
				if( m_nBoard[nRow][nCol] != 0 )
				{
					canvas.drawImage( m_imgQueen,
						BOARDLEFT + nCol * SQUAREWIDTH + 8, BOARDTOP + nRow * SQUAREHEIGHT + 6, null );
				}
			}
		}
	}
	
	void CheckColumns( Graphics canvas )
	{
		// Check all columns
		for(  int nCol=0; nCol<NUMCOLS; nCol++ )
		{
			int nColCount = 0;
			for( int nRow=0; nRow<NUMROWS; nRow++ )
			{
				if( m_nBoard[nRow][nCol] != 0 )
				{
					nColCount++;
				}
			}
			if( nColCount > 1 )
			{
				canvas.drawLine( BOARDLEFT + nCol * SQUAREWIDTH + ( SQUAREWIDTH / 2 ),
					BOARDTOP + ( SQUAREHEIGHT / 2 ),	
					BOARDLEFT + nCol * SQUAREWIDTH + ( SQUAREWIDTH / 2 ),
					BOARDTOP + SQUAREHEIGHT * 7 + ( SQUAREHEIGHT / 2 ) );
				
				m_bClash = true;
			}
		}
	}

	void CheckRows( Graphics canvas )
	{
		for(  int nRow=0; nRow<NUMROWS; nRow++ )
		{
			int nRowCount = 0;
			for( int nCol=0; nCol<NUMCOLS; nCol++ )
			{
				if( m_nBoard[nRow][nCol] != 0 )
				{
					nRowCount++;
				}
			}
			if( nRowCount > 1 )
			{
				canvas.drawLine( BOARDLEFT + ( SQUAREWIDTH / 2 ),
					BOARDTOP + nRow * SQUAREHEIGHT + ( SQUAREHEIGHT / 2 ),	
					BOARDLEFT + 7 * SQUAREWIDTH + ( SQUAREWIDTH / 2 ),
					BOARDTOP + nRow * SQUAREHEIGHT + ( SQUAREHEIGHT / 2 ) );
				
				m_bClash = true;
			}
		}
	}
	
	void CheckDiagonal1( Graphics canvas )
	{
		// Check diagonal 1
	
		for( int nRow=NUMROWS-1; nRow>=0; nRow-- )
		{
			int nCol = 0;
			
			int nThisRow = nRow;
			int nThisCol = nCol;

			int nColCount = 0;
			
			while( nThisCol < NUMCOLS &&
				nThisRow < NUMROWS )
			{
				if( m_nBoard[nThisRow][nThisCol] != 0 )
				{
					nColCount++;
				}
				nThisCol++;
				nThisRow++;
			}
			
			if( nColCount > 1 )
			{
				canvas.drawLine( BOARDLEFT + nCol * SQUAREWIDTH + ( SQUAREWIDTH / 2 ),
						BOARDTOP + nRow * SQUAREHEIGHT + ( SQUAREHEIGHT / 2 ),	
						BOARDLEFT + ( nThisCol - 1 ) * SQUAREWIDTH + ( SQUAREWIDTH / 2 ),
						BOARDTOP + ( nThisRow - 1 ) * SQUAREHEIGHT + ( SQUAREHEIGHT / 2 ) );
				
				m_bClash = true;
			}
		}

		for( int nCol=1; nCol<NUMCOLS; nCol++)
		{
			int nRow = 0;
		
			int nThisRow = nRow;
			int nThisCol = nCol;

			int nColCount = 0;
			
			while( nThisCol < NUMCOLS &&
				nThisRow < NUMROWS )
			{
				if( m_nBoard[nThisRow][nThisCol] != 0 )
				{
					nColCount++;
				}
				nThisCol++;
				nThisRow++;
			}
			
			if( nColCount > 1 )
			{
				canvas.drawLine( BOARDLEFT + nCol * SQUAREWIDTH + ( SQUAREWIDTH / 2 ),
						BOARDTOP + nRow * SQUAREHEIGHT + ( SQUAREHEIGHT / 2 ),	
						BOARDLEFT + ( nThisCol - 1 ) * SQUAREWIDTH + ( SQUAREWIDTH / 2 ),
						BOARDTOP + ( nThisRow - 1 ) * SQUAREHEIGHT + ( SQUAREHEIGHT / 2 ) );
				
				m_bClash = true;
			}
			
		}
		
	}
	
	void CheckDiagonal2( Graphics canvas )
	{
		// Check diagonal 2
		
		for( int nRow=NUMROWS-1; nRow>=0; nRow-- )
		{
			int nCol = NUMCOLS - 1;
			
			int nThisRow = nRow;
			int nThisCol = nCol;

			int nColCount = 0;
			
			while( nThisCol >= 0 &&
				nThisRow < NUMROWS )
			{
				if( m_nBoard[nThisRow][nThisCol] != 0 )
				{
					nColCount++;
				}
				nThisCol--;
				nThisRow++;
			}
			
			if( nColCount > 1 )
			{
				canvas.drawLine( BOARDLEFT + nCol * SQUAREWIDTH + ( SQUAREWIDTH / 2 ),
						BOARDTOP + nRow * SQUAREHEIGHT + ( SQUAREHEIGHT / 2 ),	
						BOARDLEFT + ( nThisCol + 1 ) * SQUAREWIDTH + ( SQUAREWIDTH / 2 ),
						BOARDTOP + ( nThisRow - 1 ) * SQUAREHEIGHT + ( SQUAREHEIGHT / 2 ) );
				
				m_bClash = true;
			}
		}

		for( int nCol=NUMCOLS-1; nCol>=0; nCol--)
		{
			int nRow = 0;
		
			int nThisRow = nRow;
			int nThisCol = nCol;

			int nColCount = 0;
			
			while( nThisCol >= 0 &&
				nThisRow < NUMROWS )
			{
				if( m_nBoard[nThisRow][nThisCol] != 0 )
				{
					nColCount++;
				}
				nThisCol--;
				nThisRow++;
			}
			
			if( nColCount > 1 )
			{
				canvas.drawLine( BOARDLEFT + nCol * SQUAREWIDTH + ( SQUAREWIDTH / 2 ),
						BOARDTOP + nRow * SQUAREHEIGHT + ( SQUAREHEIGHT / 2 ),	
						BOARDLEFT + ( nThisCol + 1 ) * SQUAREWIDTH + ( SQUAREWIDTH / 2 ),
						BOARDTOP + ( nThisRow - 1 ) * SQUAREHEIGHT + ( SQUAREHEIGHT / 2 ) );
				
				m_bClash = true;
			}
			
		}
	}
	
	public void paint (Graphics canvas)
	{
		
		m_bClash = false;
		
		DrawSquares( canvas );
		
		canvas.setColor(Color.RED);
		
		CheckColumns( canvas );
		CheckRows( canvas );
		CheckDiagonal1( canvas );
		CheckDiagonal2( canvas );
	}
	
	@Override
	public void mouseClicked(MouseEvent e) 
	{
	}
	
	@Override
	public void mouseDragged(MouseEvent arg0) 
	{
	}

	@Override
	public void mouseMoved(MouseEvent arg0) 
	{
	}

	@Override
	public void mouseEntered(MouseEvent arg0) 
	{
	}

	@Override
	public void mouseExited(MouseEvent arg0) 
	{
	}

	@Override
	public void mousePressed(MouseEvent arg0) 
	{
		int nCol = ( arg0.getX() - BOARDLEFT ) / SQUAREWIDTH;
		int nRow = ( arg0.getY() - BOARDTOP ) / SQUAREHEIGHT;
		if( nCol >= 0 &&
			nRow >= 0 &&
			nCol < NUMCOLS &&
			nRow < NUMROWS )
		{
			m_nBoard[nRow][nCol] ^= 1;
			repaint();
		}
	}

	@Override
	public void mouseReleased(MouseEvent arg0) 
	{
	}
	
}
