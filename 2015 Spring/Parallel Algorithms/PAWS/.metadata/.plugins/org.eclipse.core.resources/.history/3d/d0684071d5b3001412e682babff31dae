import java.util.ArrayList;
import java.util.Random;
import java.util.Scanner;
import java.util.concurrent.atomic.AtomicBoolean;

public class Philosopher implements Runnable {

	static int numThreads = 8;
	static ArrayList<Thread> threads = new ArrayList<Thread>();
	static ArrayList<Philosopher> workers = new ArrayList<Philosopher>();
	static AtomicBoolean[] chopsticks;
	static boolean run = true;
	public static void main(String[] args) throws InterruptedException {
		chopsticks = new AtomicBoolean[numThreads];
		for (AtomicBoolean b : chopsticks)
			b = false;
		// create all threads
		for (int i = 0; i < numThreads; i++) {
			Philosopher temp = new Philosopher(i);
			workers.add(temp);
			threads.add(new Thread(temp));
		}

		// start all threads
		for (int i = 0; i < numThreads; i++) {
			threads.get(i).start();
		}
		Scanner sc = new Scanner(System.in);
		// wait for all threads to finish before continuing
		sc.nextLine();
		run = false;

	}

	int ID;

	public Philosopher(int ID) {
		this.ID = ID;
	}

	public enum philState {
		THINKING, HUNGRY, EATING, WAITING
	}

	@Override
	public void run() {
		Random R = new Random();
		philState state = philState.THINKING;
		while (run) {
			switch (state) {
			case THINKING:
				System.out.println(ID + ": Thinking");
				if (R.nextInt() % 100 < 30) {
					state = philState.HUNGRY;
				}
				break;
			case HUNGRY:
				System.out.println(ID + ": Hungry");
				if (checkLeftStick() && checkRightStick()) {
					chopsticks[ID] = chopsticks[(ID + 1) % numThreads] = true;
					state = philState.EATING;
				}
				break;
			case EATING:
				System.out.println(ID + ": Eating");
				try {
					Thread.sleep(3000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				chopsticks[ID] = chopsticks[(ID + 1) % numThreads] = false;
				state = philState.THINKING;
				break;
			default:
				break;
			}
		}

	}

	boolean checkLeftStick() {
		return chopsticks[ID];
	}

	boolean checkRightStick() {
		return chopsticks[(ID + 1) % numThreads];
	}

	void putDown() {

	}
}
