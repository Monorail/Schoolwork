import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;

public class Maze {
	static int[] disjointSet;
	static int[] setRank;
	static char[][] maze;
	public static void main(String[] args) {
		 maze = create(2,2);
		// printMaze();
	}

	public static void printMaze() {
		int absWidth = maze.length;
		int absHeight = maze[0].length;
		System.out.printf("Printing %d . %d maze\n", absWidth, absHeight);
		for (int i = 0; i < absHeight; i++) {
			for (int j = 0; j < absWidth; j++) {
				System.out.print(maze[j][i]);
			}
			System.out.println();
		}
	}

	public static char[][] create(int width, int height) {
		disjointSet = new int[width * height];
		setRank = new int[width * height];
		// initialize set
		for (int i = 0; i < disjointSet.length; i++)
			disjointSet[i] = i;
		for (int i = 0; i < setRank.length; i++)
			setRank[i] = 0;

		int absWidth = width * 2 + 1;
		int absHeight = height * 2 + 1;
		// generate stock maze
		maze = new char[absWidth][absHeight];
		for (int i = 0; i < absWidth; i++) {
			for (int j = 0; j < absHeight; j++) {
				maze[i][j] = 'x';
			}
		}
		for (int i = 0; i < width; i++) {
			for (int j = 0; j < height; j++) {
				maze[i * 2 + 1][j * 2 + 1] = ' ';
			}
		}
		// generate random order to remove walls
		ArrayList<wall> wallList = new ArrayList<wall>();
		for (int i = 1; i < absWidth - 1; i++) 
			for (int j = 1; j < absHeight - 1; j++) 
				if ((maze[i - 1][j] == ' ' && maze[i + 1][j] == ' ')
						|| (maze[i][j - 1] == ' ' && maze[i][j + 1] == ' ')) 
					wallList.add(new wall(i, j));
		
		Collections.shuffle(wallList);

		// add wallList elements to a queue
		Queue<wall> wallQ = new LinkedList<wall>();
		for (int i = 0; i < wallList.size(); i++) {
			wallQ.add(wallList.get(i));
		}

		while (!wallQ.isEmpty()) {
			removeWall(wallQ.remove());
			printMaze();
		}

//		union(1,3);//0121 
//		union(2,3);//0111 
//		union(0,1);//1111
		
//		printSetAndRank();
//		printMaze();
//		removeWall(new wall(3,2));
//		printSetAndRank();
//
//		removeWall(new wall(2,3));
//		printSetAndRank();
//		printMaze();
		
//		removeWall(new wall(2,1));
//		printSetAndRank();
//		printMaze();
		maze[1][1] = 'e';
		maze[width * 2-1][height * 2-1] = 's';
		return maze;
	}

	public static void printSetAndRank() {
		for (int i = 0; i < disjointSet.length; i++)
			System.out.print(disjointSet[i] + " ");
		System.out.println();
		for (int i = 0; i < disjointSet.length; i++)
			System.out.print(i + " ");
		System.out.println();
		for (int i = 0; i < setRank.length; i++)
			System.out.print("--");
		System.out.println();
		for (int i = 0; i < setRank.length; i++)
			System.out.print(setRank[i] + " ");
		System.out.println();
	}

	static void removeWall(wall delWall) {
		System.out.println("Deleting wall: " + delWall);
		int wallX_a = delWall.width;
		int wallY_a = delWall.height;
		int mazeWidth_r = (maze.length - 1) / 2;
		// first assuming it's vertical:
		int a = getSetNum(wallX_a, wallY_a - 1, mazeWidth_r);
		int b = getSetNum(wallX_a, wallY_a + 1, mazeWidth_r);
		
		// change values if horizontal
		if (maze[wallX_a - 1][wallY_a] == ' ' && maze[wallX_a + 1][wallY_a] == ' ') {
//			System.out.println("Horiztonal");
//			System.out.printf("a = %d: (%d,%d)\n",a,wallX_a - 1,wallY_a);
//			System.out.printf("b = %d: (%d,%d)\n",b,wallX_a + 1,wallY_a);
			a = getSetNum(wallX_a - 1, wallY_a, mazeWidth_r);
			b = getSetNum(wallX_a + 1, wallY_a, mazeWidth_r);
		}
		else {
//			System.out.println("Vertical");
//			System.out.printf("a = %d: (%d,%d)\n",a,wallX_a,wallY_a-1);
//			System.out.printf("b = %d: (%d,%d)\n",b,wallX_a,wallY_a+1);
		}
//		if (findset(a) == findset(b)){
//			System.out.printf("Skipping union: %d and %d\n",a,b);
//			return;
//		}
		
		System.out.printf("Joining elements %d and %d\n", a, b);
		union(a, b);
		maze[wallX_a][wallY_a] = ' ';
	}

	public static int getSetNum(int width, int height, int mazeWidth_r) {
		int Ax_a = width;
		int Ax_r = (Ax_a - 1) / 2;
		int Ay_a = height;
		int Ay_r = (Ay_a - 1) / 2;
		return Ay_r * mazeWidth_r + Ax_r;

	}

	public static int findset(int index) {
		if (disjointSet[index] == index)
			return index;

		disjointSet[index] = findset(disjointSet[index]);
		return disjointSet[index];
	}

	public static void union(int a, int b) {
		int seta = findset(a);
		int setb = findset(b);
		
		if (setRank[seta] < setRank[setb])
			disjointSet[seta] = setb;
		else if (setRank[setb] < setRank[seta])
			disjointSet[setb] = seta;
		else {
			disjointSet[setb] = seta;
			setRank[seta]++;
		}
	}

	public static double hoursSpent() {
		return 3;
	}

	public static double difficultyRating() {
		return 3;
	}
}
class wall {
	static int wallNumber = 0;
	int width, height;

	public wall(int width, int height) {
		this.width = width;
		this.height = height;
		wallNumber++;
	}

	public String toString() {
		return "(" + width + "," + height + ")";
	}
}