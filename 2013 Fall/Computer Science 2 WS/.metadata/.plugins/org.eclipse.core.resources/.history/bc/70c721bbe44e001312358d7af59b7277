import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;

public class Maze {
	static int[] disjointSet;
	static int[] setRank;
	static char[][] maze;
	public static void main(String[] args) {
		ArrayList<wall> wallList = new ArrayList<wall>();
		for (int i = 0; i < 15; i++) 
			for (int j = 0; j < 15; j++)  
					wallList.add(new wall(i, j));
		
		Collections.shuffle(wallList);

		// add wallList elements to a queue
		Queue<wall> wallQ = new LinkedList<wall>();
		for (int i = 0; i < wallList.size(); i++) {
			wallQ.add(wallList.get(i));
		}

		while (!wallQ.isEmpty()) {
			wall w = wallQ.remove();
			maze = create(w.width,w.height);
			if(maze != null)printMaze();
		}
		//printMaze();
	}

	public static void printMaze() {
		int absWidth = maze.length;
		int absHeight = maze[0].length;
		System.out.printf("Printing %d,%d maze\n", absWidth, absHeight);
		for (int i = 0; i < absHeight; i++) {
			for (int j = 0; j < absWidth; j++) {
				System.out.print(maze[j][i]);
			}
			System.out.println();
		}
	}

	//generates a maze with width x height free spaces
	public static char[][] create(int width, int height) {
		if(width==0 || height == 0)
			return null;
		disjointSet = new int[width * height];
		setRank = new int[width * height];
		// initialize sets
		for (int i = 0; i < disjointSet.length; i++)
			disjointSet[i] = i;
		for (int i = 0; i < setRank.length; i++)
			setRank[i] = 0;
		
		//the 
		int absWidth = width * 2 + 1;
		int absHeight = height * 2 + 1;
		// generate stock maze 
		maze = new char[absWidth][absHeight];
		for (int i = 0; i < absWidth; i++) {
			for (int j = 0; j < absHeight; j++) {
				maze[i][j] = '#';
			}
		}
		for (int i = 0; i < width; i++) {
			for (int j = 0; j < height; j++) {
				maze[i * 2 + 1][j * 2 + 1] = ' ';
			}
		}
		// generate random order to remove walls and put wall elements in an array list
		ArrayList<wall> wallList = new ArrayList<wall>();
		for (int i = 1; i < absWidth - 1; i++) 
			for (int j = 1; j < absHeight - 1; j++) 
				if ((maze[i - 1][j] == ' ' && maze[i + 1][j] == ' ')
						|| (maze[i][j - 1] == ' ' && maze[i][j + 1] == ' ')) 
					wallList.add(new wall(i, j));
		//randomize order of wall removal
		Collections.shuffle(wallList);

		// add wallList elements to a queue 
		Queue<wall> wallQ = new LinkedList<wall>();
		for (int i = 0; i < wallList.size(); i++) {
			wallQ.add(wallList.get(i));
		}
		//pop a wall from the queue to remove
		//this will pop every wall and only add remove ones that are in different sets
		while (!wallQ.isEmpty()) {
			removeWall(wallQ.remove());
			//printMaze();
		}
		maze[1][1] = 'e';
		maze[width * 2-1][height * 2-1] = 's';
		return maze;
	}

	public static void printSetAndRank() {
		for (int i = 0; i < disjointSet.length; i++)
			System.out.print(disjointSet[i] + " ");
		System.out.println();
		for (int i = 0; i < disjointSet.length; i++)
			System.out.print(i + " ");
		System.out.println();
		for (int i = 0; i < setRank.length; i++)
			System.out.print("--");
		System.out.println();
		for (int i = 0; i < setRank.length; i++)
			System.out.print(setRank[i] + " ");
		System.out.println();
	}

	//removes a wall from the maze and updates the set information
	static void removeWall(wall delWall) {
		int absoluteWallWidth = delWall.width;
		int absoWallHeight = delWall.height;
		int mazeWidth_r = (maze.length - 1) / 2;
		// first assuming it's vertical:
		int a = getSetNum(absoluteWallWidth, absoWallHeight - 1, mazeWidth_r);
		int b = getSetNum(absoluteWallWidth, absoWallHeight + 1, mazeWidth_r);
		
		// change values if horizontal
		if (maze[absoluteWallWidth - 1][absoWallHeight] == ' ' && maze[absoluteWallWidth + 1][absoWallHeight] == ' ') {
			a = getSetNum(absoluteWallWidth - 1, absoWallHeight, mazeWidth_r);
			b = getSetNum(absoluteWallWidth + 1, absoWallHeight, mazeWidth_r);
		}
		if(findset(a) == findset(b)){
			return;
		}
		union(a, b);
		maze[absoluteWallWidth][absoWallHeight] = ' ';
	}

	public static int getSetNum(int width, int height, int mazeWidth_r) {
		int Ax_a = width;
		int Ax_r = (Ax_a - 1) / 2;
		int Ay_a = height;
		int Ay_r = (Ay_a - 1) / 2;
		return Ay_r * mazeWidth_r + Ax_r;

	}
	
	//findset code written by Sean Szumlanski
	public static int findset(int index) {
		if (disjointSet[index] == index)
			return index;

		disjointSet[index] = findset(disjointSet[index]);
		return disjointSet[index];
	}

	//union code written by Sean Szumlanski
	public static void union(int a, int b) {
		int seta = findset(a);
		int setb = findset(b);
		
		if (setRank[seta] < setRank[setb])
			disjointSet[seta] = setb;
		else if (setRank[setb] < setRank[seta])
			disjointSet[setb] = seta;
		else {
			disjointSet[setb] = seta;
			setRank[seta]++;
		}
	}

	public static double hoursSpent() {
		return 10;
	}

	public static double difficultyRating() {
		return 3.3;
	}
}
class wall {
	static int wallNumber = 0;
	int width, height;

	public wall(int width, int height) {
		this.width = width;
		this.height = height;
		wallNumber++;
	}

	public String toString() {
		return "(" + width + "," + height + ")";
	}
}